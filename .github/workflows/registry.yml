name: Build and Push Docker image

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: dnxsolutions/kube-tools:latest
          outputs: type=docker,dest=/tmp/kube-tools.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: kube-tools
          path: /tmp/kube-tools.tar
  ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: build
    container: dnxsolutions/aws:2.1.6-dnx1
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Download docker artifact
        uses: actions/download-artifact@v2
        with:
          name: kube-tools
          path: /tmp
      - name: Load, tag, and push image
        env:
          ECR_REGISTRY: public.ecr.aws
          ECR_REPOSITORY: dnxsolutions/kube-tools
          IMAGE_TAG: ${{ steps.get_tag.outputs.tag }}
        run: |
          apk add docker
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          docker load --input /tmp/kube-tools.tar
          docker image ls -a
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  docker-hub:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DNX_DOCKERHUB_USERNAME }}
          password: ${{ secrets.DNX_DOCKERHUB_TOKEN }}
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: kube-tools
          path: /tmp
      - name: Load, tag, and push image
        env:
          DOCKERHUB_REPOSITORY: dnxsolutions/kube-tools
          IMAGE_TAG: ${{ steps.get_tag.outputs.tag }}
        run: |
          docker load --input /tmp/kube-tools.tar
          docker image ls -a
          docker push $DOCKERHUB_REPOSITORY:latest
          docker tag $DOCKERHUB_REPOSITORY:latest $DOCKERHUB_REPOSITORY:$IMAGE_TAG
          docker push $DOCKERHUB_REPOSITORY:$IMAGE_TAG

  ghcr:
    name: Push to GitHub Registry
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: kube-tools
          path: /tmp
      - name: Load, tag, and push image
        env:
          BASE_REPOSITORY: dnxsolutions/kube-tools
          GHCR_REPOSITORY: ghcr.io/dnxlabs/kube-tools
          IMAGE_TAG: ${{ steps.get_tag.outputs.tag }}
        run: |
          docker load --input /tmp/kube-tools.tar
          docker image ls -a
          docker tag $BASE_REPOSITORY:latest $GHCR_REPOSITORY:latest
          docker push $GHCR_REPOSITORY:latest
          docker tag $GHCR_REPOSITORY:latest $GHCR_REPOSITORY:$IMAGE_TAG
          docker push $GHCR_REPOSITORY:$IMAGE_TAG